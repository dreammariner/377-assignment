Michael Herbert
Dan Gereb

We began by setting up a GitHub repository to allow our collaboration to extend beyond in person meet ups, due to conflicting schedules. Once the skeleton of the project was laid out, we split up different areas to research and return with. Dan volunteered to look into implementing our own Bounded Buffer while Michael decided to explore how semaphores are implemented in Java. We collaboratively worked on the separation of necessary classes.  For MapReduce, the mapper is the producer while the reducer is the consumer. The synchronization works in the case that the consumer cannot consume without the producer not having produced anything AND the producer cannot produce when the buffer is full. Also, maintaining a counter variable that decrements when a map thread terminates, synchronization is used to protect the counter from being inaccurately decremented between threads. Javaâ€™s synchronized method was utilized.

We had trouble piecing together how each individual part would fit in a finished product. We grasped the entire concept, but only on the conceptual level, and when implemented, ours failed. We would process the files in the Map thread, sending the words to the buffer, but we struggled when it came to hashing the string to find the reduce thread. Overall, the communication between threads in regards to the data structures really tripped us up. Implementation was the hardest part, we were able to outline all things necessary to achieve our goal, it was just the execution where we failed.